#!/usr/bin/ruby

# Here's a sequence of numbers where each value in the sequence is
# generated by collecting, counting and printing the number of
# sequential digits in the previous value starting from 1:
# 
# 1
# 11
# 21
# 1211
# 111221
# 312211
# 13112221
# ...
# 
# In any programming language you want
# (Python/Ruby/JavaScript/Java/whatever,) can you write a function that,
# given some number n as an input, prints out the first n items in the
# sequence.

def sequence(n)
  line = "1"
  puts line
  n.times do
    counter = [] ; vals = []
    line.each_char do |char|
      if vals.empty? || vals.last != char
        vals << char
        counter << 1
      else
        index = vals.rindex(char)
        counter[index] += 1
      end
    end
    line = counter.zip(vals).flatten.join
    puts line
  end
end

sequence(20)

# 1
# 11
# 21
# 1211
# 111221
# 312211
# 13112221
# 1113213211
# 31131211131221
# 13211311123113112211
# 11131221133112132113212221
# 3113112221232112111312211312113211
# 1321132132111213122112311311222113111221131221
# 11131221131211131231121113112221121321132132211331222113112211
# 311311222113111231131112132112311321322112111312211312111322212311322113212221
# 132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211
# 11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221
# 31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211
# 1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221
# 11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211
# 311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221